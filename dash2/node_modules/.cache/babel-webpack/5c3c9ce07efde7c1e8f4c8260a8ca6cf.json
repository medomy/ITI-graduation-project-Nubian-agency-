{"ast":null,"code":"import _asyncToGenerator from \"/home/dev/Development/src/untitled folder/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { signOut, signInWithEmailAndPassword } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(auth, router) {\n    this.auth = auth;\n    this.router = router;\n    this.auth.onAuthStateChanged(user => {\n      if (user) {\n        localStorage.setItem('admin', JSON.stringify(user));\n      }\n    });\n  }\n  /* Login */\n\n\n  Login(data) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const credential = yield signInWithEmailAndPassword(_this.auth, data.email, data.password);\n      yield _this.router.navigate(['']);\n    })();\n  }\n  /* Logout */\n\n\n  Logout() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      signOut(_this2.auth).then( /*#__PURE__*/_asyncToGenerator(function* () {\n        window.localStorage.removeItem('admin');\n\n        _this2.router.navigate(['admin/auth/login']);\n      })).catch(error => {\n        console.log(error);\n      });\n    })();\n  }\n\n  get getuserLocal() {\n    return JSON.parse(window.localStorage.getItem('admin'));\n  }\n  /*isLogin*/\n  // get isLoggedIn(): boolean {\n  //   return this.loginStatus;\n  // }\n\n\n  get isLoggedIn() {\n    return !!this.getuserLocal;\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/dev/Development/src/untitled folder/dashboard/src/app/core/services/auth/auth.service.ts"],"names":["signOut","signInWithEmailAndPassword","i0","i1","i2","AuthService","constructor","auth","router","onAuthStateChanged","user","localStorage","setItem","JSON","stringify","Login","data","credential","email","password","navigate","Logout","then","window","removeItem","catch","error","console","log","getuserLocal","parse","getItem","isLoggedIn","ɵfac","AuthService_Factory","t","ɵɵinject","Auth","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,OAAT,EAAkBC,0BAAlB,QAAoD,oBAApD;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,oBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;AACtB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKD,IAAL,CAAUE,kBAAV,CAA8BC,IAAD,IAAU;AACnC,UAAIA,IAAJ,EAAU;AACNC,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA9B;AACH;AACJ,KAJD;AAKH;AACD;;;AACMK,EAAAA,KAAK,CAACC,IAAD,EAAO;AAAA;;AAAA;AACd,YAAMC,UAAU,SAAShB,0BAA0B,CAAC,KAAI,CAACM,IAAN,EAAYS,IAAI,CAACE,KAAjB,EAAwBF,IAAI,CAACG,QAA7B,CAAnD;AACA,YAAM,KAAI,CAACX,MAAL,CAAYY,QAAZ,CAAqB,CAAC,EAAD,CAArB,CAAN;AAFc;AAGjB;AACD;;;AACMC,EAAAA,MAAM,GAAG;AAAA;;AAAA;AACXrB,MAAAA,OAAO,CAAC,MAAI,CAACO,IAAN,CAAP,CACKe,IADL,iCACU,aAAY;AAClBC,QAAAA,MAAM,CAACZ,YAAP,CAAoBa,UAApB,CAA+B,OAA/B;;AACA,QAAA,MAAI,CAAChB,MAAL,CAAYY,QAAZ,CAAqB,CAAC,kBAAD,CAArB;AACH,OAJD,GAKKK,KALL,CAKYC,KAAD,IAAW;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OAPD;AADW;AASd;;AACe,MAAZG,YAAY,GAAG;AACf,WAAOhB,IAAI,CAACiB,KAAL,CAAWP,MAAM,CAACZ,YAAP,CAAoBoB,OAApB,CAA4B,OAA5B,CAAX,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACc,MAAVC,UAAU,GAAG;AACb,WAAO,CAAC,CAAC,KAAKH,YAAd;AACH;;AAnCoB;;AAqCzBxB,WAAW,CAAC4B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI9B,WAAV,EAAuBH,EAAE,CAACkC,QAAH,CAAYjC,EAAE,CAACkC,IAAf,CAAvB,EAA6CnC,EAAE,CAACkC,QAAH,CAAYhC,EAAE,CAACkC,MAAf,CAA7C,CAAP;AAA8E,CAAnI;;AACAjC,WAAW,CAACkC,KAAZ,GAAoB,aAAcrC,EAAE,CAACsC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEpC,WAAT;AAAsBqC,EAAAA,OAAO,EAAErC,WAAW,CAAC4B,IAA3C;AAAiDU,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { signOut, signInWithEmailAndPassword } from '@angular/fire/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n    constructor(auth, router) {\n        this.auth = auth;\n        this.router = router;\n        this.auth.onAuthStateChanged((user) => {\n            if (user) {\n                localStorage.setItem('admin', JSON.stringify(user));\n            }\n        });\n    }\n    /* Login */\n    async Login(data) {\n        const credential = await signInWithEmailAndPassword(this.auth, data.email, data.password);\n        await this.router.navigate(['']);\n    }\n    /* Logout */\n    async Logout() {\n        signOut(this.auth)\n            .then(async () => {\n            window.localStorage.removeItem('admin');\n            this.router.navigate(['admin/auth/login']);\n        })\n            .catch((error) => {\n            console.log(error);\n        });\n    }\n    get getuserLocal() {\n        return JSON.parse(window.localStorage.getItem('admin'));\n    }\n    /*isLogin*/\n    // get isLoggedIn(): boolean {\n    //   return this.loginStatus;\n    // }\n    get isLoggedIn() {\n        return !!this.getuserLocal;\n    }\n}\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.Router)); };\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}