{"ast":null,"code":"import _asyncToGenerator from \"/home/dev/Development/src/untitled folder/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { collection, deleteDoc, doc, getDocs, setDoc } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nexport class AddressService {\n  constructor(db) {\n    var _this = this;\n\n    this.db = db; //create address\n\n    this.createAddress = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* ({\n        data\n      }) {\n        _this.addressData = {\n          city: '',\n          region: '',\n          street: '',\n          building: '',\n          floor: '',\n          flat: '',\n          note: '',\n          userID: data.uid,\n          TimeStamp: {\n            createdAt: new Date().toDateString(),\n            updatedAt: null,\n            removedAt: null\n          }\n        };\n        yield setDoc(doc(collection(_this.db, 'addresses')), {\n          data: [_this.addressData]\n        });\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  getAddresses() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let Addresses = [];\n      const querySnapshot = yield getDocs(collection(_this2.db, 'addresses'));\n      querySnapshot.forEach(docu => {\n        Addresses.push(Object.assign(Object.assign({}, docu.data()), {\n          id: docu.id\n        }));\n      });\n      return Addresses;\n    })();\n  }\n\n  getAddressesByUid(UID) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let addresses = [];\n      yield _this3.getAddresses().then(wishLists => wishLists.forEach(wishList => {\n        if (wishList.data[0].userID == UID) {\n          addresses.push(wishList);\n        }\n      }));\n      return addresses;\n    })();\n  }\n\n  removeAddress(id) {\n    deleteDoc(doc(this.db, 'addresses', id));\n  } //update\n\n\n  updateAddresses(id, newprop) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this4.db, 'addresses', id), newprop, {\n        merge: true\n      });\n    })();\n  }\n\n}\n\nAddressService.ɵfac = function AddressService_Factory(t) {\n  return new (t || AddressService)(i0.ɵɵinject(i1.Firestore));\n};\n\nAddressService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AddressService,\n  factory: AddressService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/dev/Development/src/untitled folder/dashboard/src/app/core/services/address/address.service.ts"],"names":["collection","deleteDoc","doc","getDocs","setDoc","i0","i1","AddressService","constructor","db","createAddress","data","addressData","city","region","street","building","floor","flat","note","userID","uid","TimeStamp","createdAt","Date","toDateString","updatedAt","removedAt","getAddresses","Addresses","querySnapshot","forEach","docu","push","Object","assign","id","getAddressesByUid","UID","addresses","then","wishLists","wishList","removeAddress","updateAddresses","newprop","merge","ɵfac","AddressService_Factory","t","ɵɵinject","Firestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { collection, deleteDoc, doc, getDocs, setDoc, } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nexport class AddressService {\n    constructor(db) {\n        this.db = db;\n        //create address\n        this.createAddress = async ({ data }) => {\n            this.addressData = {\n                city: '',\n                region: '',\n                street: '',\n                building: '',\n                floor: '',\n                flat: '',\n                note: '',\n                userID: data.uid,\n                TimeStamp: {\n                    createdAt: new Date().toDateString(),\n                    updatedAt: null,\n                    removedAt: null,\n                },\n            };\n            await setDoc(doc(collection(this.db, 'addresses')), {\n                data: [this.addressData],\n            });\n        };\n    }\n    async getAddresses() {\n        let Addresses = [];\n        const querySnapshot = await getDocs(collection(this.db, 'addresses'));\n        querySnapshot.forEach((docu) => {\n            Addresses.push(Object.assign(Object.assign({}, docu.data()), { id: docu.id }));\n        });\n        return Addresses;\n    }\n    async getAddressesByUid(UID) {\n        let addresses = [];\n        await this.getAddresses().then((wishLists) => wishLists.forEach((wishList) => {\n            if (wishList.data[0].userID == UID) {\n                addresses.push(wishList);\n            }\n        }));\n        return addresses;\n    }\n    removeAddress(id) {\n        deleteDoc(doc(this.db, 'addresses', id));\n    }\n    //update\n    async updateAddresses(id, newprop) {\n        await setDoc(doc(this.db, 'addresses', id), newprop, { merge: true });\n    }\n}\nAddressService.ɵfac = function AddressService_Factory(t) { return new (t || AddressService)(i0.ɵɵinject(i1.Firestore)); };\nAddressService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AddressService, factory: AddressService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}