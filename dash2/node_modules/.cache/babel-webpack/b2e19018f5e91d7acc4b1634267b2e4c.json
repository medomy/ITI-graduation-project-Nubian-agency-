{"ast":null,"code":"import _asyncToGenerator from \"/home/dev/Desktop/final relase/Nubian-Agancy/Client-Side/dash2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { collection, collectionData, query, where } from \"@angular/fire/firestore\";\nimport { deleteDoc, doc, setDoc } from \"@firebase/firestore\";\nimport { docData } from \"rxfire/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"../auth/auth.service\";\nexport class OrderService {\n  constructor(firestore, authService) {\n    this.firestore = firestore;\n    this.authService = authService;\n  }\n\n  get user() {\n    return this.authService.getuserLocal;\n  } //getAll\n\n\n  getOrders() {\n    //let data = collection(this.firestore, \"order\");\n    // let Orders = [];\n    // const querySnapshot = await getDocs(collection(this.firestore, 'order'));\n    // querySnapshot.forEach((docu) => {\n    //   Orders.push({ ...docu.data(), id: docu.id });\n    // });\n    // return Orders;\n    //return collectionData(data);\n    const dataCollection = collection(this.firestore, \"order\");\n    return collectionData(dataCollection);\n  }\n  /*getOrders() {\n  let data = collection(this.firestore, \"order\");\n  const Orders = [];\n  onSnapshot(data, (querySnapshot) => {\n       querySnapshot.forEach((doc) => {\n      Orders.push({ ...doc.data(), id: doc.id })\n    });\n     });\n  return Orders\n   }*/\n\n\n  getOrdersForUser() {\n    const data = query(collection(this.firestore, \"order\"), where(\"userId\", \"==\", this.user.uid));\n    return collectionData(data);\n  } //get by id\n\n\n  getOneOrder(id) {\n    let oneOrder = doc(this.firestore, \"order\", id);\n    return docData(oneOrder);\n  } //add\n\n\n  addOrder(order) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const neworder = yield doc(collection(_this.firestore, \"order\"));\n      setDoc(neworder, Object.assign(Object.assign({}, order), {\n        id: neworder.id\n      }));\n    })();\n  } //update\n\n\n  updateOrder(Id, newProp) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(collection(_this2.firestore, \"order\", Id)), {\n        Ispaid: true\n      }, {\n        merge: true\n      });\n    })();\n  } //remove\n\n\n  removeOrder(Id) {\n    deleteDoc(doc(this.firestore, \"order\", Id));\n  }\n\n}\n\nOrderService.ɵfac = function OrderService_Factory(t) {\n  return new (t || OrderService)(i0.ɵɵinject(i1.Firestore), i0.ɵɵinject(i2.AuthService));\n};\n\nOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: OrderService,\n  factory: OrderService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"sources":["/home/dev/Desktop/final relase/Nubian-Agancy/Client-Side/dash2/src/app/core/services/Order/order.service.ts"],"names":["collection","collectionData","query","where","deleteDoc","doc","setDoc","docData","i0","i1","i2","OrderService","constructor","firestore","authService","user","getuserLocal","getOrders","dataCollection","getOrdersForUser","data","uid","getOneOrder","id","oneOrder","addOrder","order","neworder","Object","assign","updateOrder","Id","newProp","Ispaid","merge","removeOrder","ɵfac","OrderService_Factory","t","ɵɵinject","Firestore","AuthService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { collection, collectionData, query, where, } from \"@angular/fire/firestore\";\nimport { deleteDoc, doc, setDoc } from \"@firebase/firestore\";\nimport { docData } from \"rxfire/firestore\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"../auth/auth.service\";\nexport class OrderService {\n    constructor(firestore, authService) {\n        this.firestore = firestore;\n        this.authService = authService;\n    }\n    get user() {\n        return this.authService.getuserLocal;\n    }\n    //getAll\n    getOrders() {\n        //let data = collection(this.firestore, \"order\");\n        // let Orders = [];\n        // const querySnapshot = await getDocs(collection(this.firestore, 'order'));\n        // querySnapshot.forEach((docu) => {\n        //   Orders.push({ ...docu.data(), id: docu.id });\n        // });\n        // return Orders;\n        //return collectionData(data);\n        const dataCollection = collection(this.firestore, \"order\");\n        return collectionData(dataCollection);\n    }\n    /*getOrders() {\n    let data = collection(this.firestore, \"order\");\n    const Orders = [];\n    onSnapshot(data, (querySnapshot) => {\n  \n      querySnapshot.forEach((doc) => {\n        Orders.push({ ...doc.data(), id: doc.id })\n      });\n  \n    });\n    return Orders\n  \n  }*/\n    getOrdersForUser() {\n        const data = query(collection(this.firestore, \"order\"), where(\"userId\", \"==\", this.user.uid));\n        return collectionData(data);\n    }\n    //get by id\n    getOneOrder(id) {\n        let oneOrder = doc(this.firestore, \"order\", id);\n        return docData(oneOrder);\n    }\n    //add\n    async addOrder(order) {\n        const neworder = await doc(collection(this.firestore, \"order\"));\n        setDoc(neworder, Object.assign(Object.assign({}, order), { id: neworder.id }));\n    }\n    //update\n    async updateOrder(Id, newProp) {\n        await setDoc(doc(collection(this.firestore, \"order\", Id)), { Ispaid: true }, {\n            merge: true,\n        });\n    }\n    //remove\n    removeOrder(Id) {\n        deleteDoc(doc(this.firestore, \"order\", Id));\n    }\n}\nOrderService.ɵfac = function OrderService_Factory(t) { return new (t || OrderService)(i0.ɵɵinject(i1.Firestore), i0.ɵɵinject(i2.AuthService)); };\nOrderService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: OrderService, factory: OrderService.ɵfac, providedIn: \"root\" });\n"]},"metadata":{},"sourceType":"module"}