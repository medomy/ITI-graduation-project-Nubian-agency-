{"ast":null,"code":"import _asyncToGenerator from \"/home/dev/Development/src/untitled folder/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ref, uploadBytesResumable, getDownloadURL } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class StorageService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n\n  upload(folder, name, file) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const path = `${folder}/${name}`;\n      {\n        if (file) {\n          try {\n            const storageRef = ref(_this.storage, path);\n            const task = uploadBytesResumable(storageRef, file);\n            yield task;\n            _this.url = yield getDownloadURL(storageRef);\n            console.log(_this.url);\n            console.log(task);\n          } catch (e) {\n            console.error(e);\n          }\n        } else {// handle invalid file\n        }\n\n        return _this.url;\n      }\n    })();\n  }\n\n}\n\nStorageService.ɵfac = function StorageService_Factory(t) {\n  return new (t || StorageService)(i0.ɵɵinject(i1.Storage));\n};\n\nStorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: StorageService,\n  factory: StorageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/dev/Development/src/untitled folder/dashboard/src/app/core/services/storage/storage.service.ts"],"names":["ref","uploadBytesResumable","getDownloadURL","i0","i1","StorageService","constructor","storage","upload","folder","name","file","path","storageRef","task","url","console","log","e","error","ɵfac","StorageService_Factory","t","ɵɵinject","Storage","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,GAAT,EAAcC,oBAAd,EAAoCC,cAApC,QAA2D,uBAA3D;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,uBAApB;AACA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACH;;AACKC,EAAAA,MAAM,CAACC,MAAD,EAASC,IAAT,EAAeC,IAAf,EAAqB;AAAA;;AAAA;AAC7B,YAAMC,IAAI,GAAI,GAAEH,MAAO,IAAGC,IAAK,EAA/B;AACA;AACI,YAAIC,IAAJ,EAAU;AACN,cAAI;AACA,kBAAME,UAAU,GAAGb,GAAG,CAAC,KAAI,CAACO,OAAN,EAAeK,IAAf,CAAtB;AACA,kBAAME,IAAI,GAAGb,oBAAoB,CAACY,UAAD,EAAaF,IAAb,CAAjC;AACA,kBAAMG,IAAN;AACA,YAAA,KAAI,CAACC,GAAL,SAAiBb,cAAc,CAACW,UAAD,CAA/B;AACAG,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAI,CAACF,GAAjB;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACH,WAPD,CAQA,OAAOI,CAAP,EAAU;AACNF,YAAAA,OAAO,CAACG,KAAR,CAAcD,CAAd;AACH;AACJ,SAZD,MAaK,CACD;AACH;;AACD,eAAO,KAAI,CAACH,GAAZ;AACH;AApB4B;AAqBhC;;AAzBuB;;AA2B5BV,cAAc,CAACe,IAAf,GAAsB,SAASC,sBAAT,CAAgCC,CAAhC,EAAmC;AAAE,SAAO,KAAKA,CAAC,IAAIjB,cAAV,EAA0BF,EAAE,CAACoB,QAAH,CAAYnB,EAAE,CAACoB,OAAf,CAA1B,CAAP;AAA4D,CAAvH;;AACAnB,cAAc,CAACoB,KAAf,GAAuB,aAActB,EAAE,CAACuB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEtB,cAAT;AAAyBuB,EAAAA,OAAO,EAAEvB,cAAc,CAACe,IAAjD;AAAuDS,EAAAA,UAAU,EAAE;AAAnE,CAAtB,CAArC","sourcesContent":["import { ref, uploadBytesResumable, getDownloadURL, } from '@angular/fire/storage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/storage\";\nexport class StorageService {\n    constructor(storage) {\n        this.storage = storage;\n    }\n    async upload(folder, name, file) {\n        const path = `${folder}/${name}`;\n        {\n            if (file) {\n                try {\n                    const storageRef = ref(this.storage, path);\n                    const task = uploadBytesResumable(storageRef, file);\n                    await task;\n                    this.url = await getDownloadURL(storageRef);\n                    console.log(this.url);\n                    console.log(task);\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            }\n            else {\n                // handle invalid file\n            }\n            return this.url;\n        }\n    }\n}\nStorageService.ɵfac = function StorageService_Factory(t) { return new (t || StorageService)(i0.ɵɵinject(i1.Storage)); };\nStorageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: StorageService, factory: StorageService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}