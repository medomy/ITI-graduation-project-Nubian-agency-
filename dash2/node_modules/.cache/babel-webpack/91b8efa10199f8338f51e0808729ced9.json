{"ast":null,"code":"import _asyncToGenerator from \"/home/dev/Development/src/Nubian-Agancy/Client-Side/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { collection, collectionData } from '@angular/fire/firestore';\nimport { deleteDoc, doc, setDoc } from '@firebase/firestore';\nimport { docData } from 'rxfire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nexport class CategoriesService {\n  constructor(firestore) {\n    this.firestore = firestore;\n    this.getcategoriess();\n  } //getAll\n\n\n  getcategoriess() {\n    const dataCollection = collection(this.firestore, 'category');\n    return collectionData(dataCollection);\n  } //get by id\n  // returns an observable (must subscribe after)\n\n\n  getOneCategory(id) {\n    let oneCategory = doc(this.firestore, `category`, id);\n    return docData(oneCategory);\n  } //add categeory\n\n\n  addCategory(category) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const newCat = yield doc(collection(_this.firestore, 'category'));\n      setDoc(newCat, Object.assign(Object.assign({}, category), {\n        id: newCat.id\n      }));\n    })();\n  } //update (newcat is the added property in an object)\n\n\n  updateCategory(id, newcat) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this2.firestore, 'category', id), newcat, {\n        merge: true\n      });\n    })();\n  } //remove\n\n\n  removeCategory(id) {\n    deleteDoc(doc(this.firestore, 'category', id));\n  }\n\n}\n\nCategoriesService.ɵfac = function CategoriesService_Factory(t) {\n  return new (t || CategoriesService)(i0.ɵɵinject(i1.Firestore));\n};\n\nCategoriesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CategoriesService,\n  factory: CategoriesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/dev/Development/src/Nubian-Agancy/Client-Side/dashboard/src/app/core/services/categories/categories.service.ts"],"names":["collection","collectionData","deleteDoc","doc","setDoc","docData","i0","i1","CategoriesService","constructor","firestore","getcategoriess","dataCollection","getOneCategory","id","oneCategory","addCategory","category","newCat","Object","assign","updateCategory","newcat","merge","removeCategory","ɵfac","CategoriesService_Factory","t","ɵɵinject","Firestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA4C,yBAA5C;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,MAAzB,QAAuC,qBAAvC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,yBAApB;AACA,OAAO,MAAMC,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,cAAL;AACH,GAJ0B,CAK3B;;;AACAA,EAAAA,cAAc,GAAG;AACb,UAAMC,cAAc,GAAGZ,UAAU,CAAC,KAAKU,SAAN,EAAiB,UAAjB,CAAjC;AACA,WAAOT,cAAc,CAACW,cAAD,CAArB;AACH,GAT0B,CAU3B;AACA;;;AACAC,EAAAA,cAAc,CAACC,EAAD,EAAK;AACf,QAAIC,WAAW,GAAGZ,GAAG,CAAC,KAAKO,SAAN,EAAkB,UAAlB,EAA6BI,EAA7B,CAArB;AACA,WAAOT,OAAO,CAACU,WAAD,CAAd;AACH,GAf0B,CAgB3B;;;AACMC,EAAAA,WAAW,CAACC,QAAD,EAAW;AAAA;;AAAA;AACxB,YAAMC,MAAM,SAASf,GAAG,CAACH,UAAU,CAAC,KAAI,CAACU,SAAN,EAAiB,UAAjB,CAAX,CAAxB;AACAN,MAAAA,MAAM,CAACc,MAAD,EAASC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,QAAlB,CAAd,EAA2C;AAAEH,QAAAA,EAAE,EAAEI,MAAM,CAACJ;AAAb,OAA3C,CAAT,CAAN;AAFwB;AAG3B,GApB0B,CAqB3B;;;AACMO,EAAAA,cAAc,CAACP,EAAD,EAAKQ,MAAL,EAAa;AAAA;;AAAA;AAC7B,YAAMlB,MAAM,CAACD,GAAG,CAAC,MAAI,CAACO,SAAN,EAAiB,UAAjB,EAA6BI,EAA7B,CAAJ,EAAsCQ,MAAtC,EAA8C;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAA9C,CAAZ;AAD6B;AAEhC,GAxB0B,CAyB3B;;;AACAC,EAAAA,cAAc,CAACV,EAAD,EAAK;AACfZ,IAAAA,SAAS,CAACC,GAAG,CAAC,KAAKO,SAAN,EAAiB,UAAjB,EAA6BI,EAA7B,CAAJ,CAAT;AACH;;AA5B0B;;AA8B/BN,iBAAiB,CAACiB,IAAlB,GAAyB,SAASC,yBAAT,CAAmCC,CAAnC,EAAsC;AAAE,SAAO,KAAKA,CAAC,IAAInB,iBAAV,EAA6BF,EAAE,CAACsB,QAAH,CAAYrB,EAAE,CAACsB,SAAf,CAA7B,CAAP;AAAiE,CAAlI;;AACArB,iBAAiB,CAACsB,KAAlB,GAA0B,aAAcxB,EAAE,CAACyB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAExB,iBAAT;AAA4ByB,EAAAA,OAAO,EAAEzB,iBAAiB,CAACiB,IAAvD;AAA6DS,EAAAA,UAAU,EAAE;AAAzE,CAAtB,CAAxC","sourcesContent":["import { collection, collectionData, } from '@angular/fire/firestore';\nimport { deleteDoc, doc, setDoc } from '@firebase/firestore';\nimport { docData } from 'rxfire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nexport class CategoriesService {\n    constructor(firestore) {\n        this.firestore = firestore;\n        this.getcategoriess();\n    }\n    //getAll\n    getcategoriess() {\n        const dataCollection = collection(this.firestore, 'category');\n        return collectionData(dataCollection);\n    }\n    //get by id\n    // returns an observable (must subscribe after)\n    getOneCategory(id) {\n        let oneCategory = doc(this.firestore, `category`, id);\n        return docData(oneCategory);\n    }\n    //add categeory\n    async addCategory(category) {\n        const newCat = await doc(collection(this.firestore, 'category'));\n        setDoc(newCat, Object.assign(Object.assign({}, category), { id: newCat.id }));\n    }\n    //update (newcat is the added property in an object)\n    async updateCategory(id, newcat) {\n        await setDoc(doc(this.firestore, 'category', id), newcat, { merge: true });\n    }\n    //remove\n    removeCategory(id) {\n        deleteDoc(doc(this.firestore, 'category', id));\n    }\n}\nCategoriesService.ɵfac = function CategoriesService_Factory(t) { return new (t || CategoriesService)(i0.ɵɵinject(i1.Firestore)); };\nCategoriesService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CategoriesService, factory: CategoriesService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}