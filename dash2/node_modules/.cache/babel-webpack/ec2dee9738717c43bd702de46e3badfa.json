{"ast":null,"code":"import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\n\nclass Storage {\n  constructor(auth) {\n    return auth;\n  }\n\n}\n\nconst STORAGE_PROVIDER_NAME = 'storage';\n\nclass StorageInstances {\n  constructor() {\n    return ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);\n  }\n\n}\n\nconst storageInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME))), distinct());\nconst PROVIDED_STORAGE_INSTANCES = new InjectionToken('angularfire2.storage-instances');\n\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n  const defaultStorage = ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n  return defaultStorage && new Storage(defaultStorage);\n}\n\nfunction storageInstanceFactory(fn) {\n  return (zone, injector) => {\n    const storage = zone.runOutsideAngular(() => fn(injector));\n    return new Storage(storage);\n  };\n}\n\nconst STORAGE_INSTANCES_PROVIDER = {\n  provide: StorageInstances,\n  deps: [[new Optional(), PROVIDED_STORAGE_INSTANCES]]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n  provide: Storage,\n  useFactory: defaultStorageInstanceFactory,\n  deps: [[new Optional(), PROVIDED_STORAGE_INSTANCES], FirebaseApp]\n};\n\nclass StorageModule {\n  constructor() {\n    registerVersion('angularfire', VERSION.full, 'gcs');\n  }\n\n}\n\nStorageModule.ɵfac = function StorageModule_Factory(t) {\n  return new (t || StorageModule)();\n};\n\nStorageModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: StorageModule\n});\nStorageModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(StorageModule, [{\n    type: NgModule,\n    args: [{\n      providers: [DEFAULT_STORAGE_INSTANCE_PROVIDER, STORAGE_INSTANCES_PROVIDER]\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nfunction provideStorage(fn, ...deps) {\n  return {\n    ngModule: StorageModule,\n    providers: [{\n      provide: PROVIDED_STORAGE_INSTANCES,\n      useFactory: storageInstanceFactory(fn),\n      multi: true,\n      deps: [NgZone, Injector, ɵAngularFireSchedulers, FirebaseApps, // Defensively load Auth first, if provided\n      [new Optional(), AuthInstances], [new Optional(), AppCheckInstances], ...deps]\n    }]\n  };\n} // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\n\nconst fromTask = ɵzoneWrap(fromTask$1, true);\nconst percentage = ɵzoneWrap(percentage$1, true); // DO NOT MODIFY, this file is autogenerated by tools/build.ts\n\nconst connectStorageEmulator = ɵzoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = ɵzoneWrap(deleteObject$1, true);\nconst getDownloadURL = ɵzoneWrap(getDownloadURL$1, true);\nconst getMetadata = ɵzoneWrap(getMetadata$1, true);\nconst getStorage = ɵzoneWrap(getStorage$1, true);\nconst list = ɵzoneWrap(list$1, true);\nconst listAll = ɵzoneWrap(listAll$1, true);\nconst ref = ɵzoneWrap(ref$1, true);\nconst updateMetadata = ɵzoneWrap(updateMetadata$1, true);\nconst uploadBytes = ɵzoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = ɵzoneWrap(uploadBytesResumable$1, true);\nconst uploadString = ɵzoneWrap(uploadString$1, true);\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getDownloadURL, getMetadata, getStorage, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };","map":{"version":3,"sources":["/home/dev/Desktop/final relase/Nubian-Agancy/Client-Side/dash2/node_modules/@angular/fire/fesm2015/angular-fire-storage.js"],"names":["ɵgetAllInstancesOf","ɵgetDefaultInstanceOf","VERSION","ɵAngularFireSchedulers","ɵzoneWrap","timer","from","concatMap","distinct","i0","InjectionToken","Optional","NgModule","NgZone","Injector","FirebaseApp","FirebaseApps","AuthInstances","registerVersion","AppCheckInstances","fromTask","fromTask$1","percentage","percentage$1","connectStorageEmulator","connectStorageEmulator$1","deleteObject","deleteObject$1","getDownloadURL","getDownloadURL$1","getMetadata","getMetadata$1","getStorage","getStorage$1","list","list$1","listAll","listAll$1","ref","ref$1","updateMetadata","updateMetadata$1","uploadBytes","uploadBytes$1","uploadBytesResumable","uploadBytesResumable$1","uploadString","uploadString$1","Storage","constructor","auth","STORAGE_PROVIDER_NAME","StorageInstances","storageInstance$","pipe","PROVIDED_STORAGE_INSTANCES","defaultStorageInstanceFactory","provided","defaultApp","defaultStorage","storageInstanceFactory","fn","zone","injector","storage","runOutsideAngular","STORAGE_INSTANCES_PROVIDER","provide","deps","DEFAULT_STORAGE_INSTANCE_PROVIDER","useFactory","StorageModule","full","ɵfac","ɵmod","ɵinj","type","args","providers","provideStorage","ngModule","multi"],"mappings":"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","sourcesContent":["import { ɵgetAllInstancesOf, ɵgetDefaultInstanceOf, VERSION, ɵAngularFireSchedulers, ɵzoneWrap } from '@angular/fire';\nimport { timer, from } from 'rxjs';\nimport { concatMap, distinct } from 'rxjs/operators';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Optional, NgModule, NgZone, Injector } from '@angular/core';\nimport { FirebaseApp, FirebaseApps } from '@angular/fire/app';\nimport { AuthInstances } from '@angular/fire/auth';\nimport { registerVersion } from 'firebase/app';\nimport { AppCheckInstances } from '@angular/fire/app-check';\nimport { fromTask as fromTask$1, percentage as percentage$1 } from 'rxfire/storage';\nimport { connectStorageEmulator as connectStorageEmulator$1, deleteObject as deleteObject$1, getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, getStorage as getStorage$1, list as list$1, listAll as listAll$1, ref as ref$1, updateMetadata as updateMetadata$1, uploadBytes as uploadBytes$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nexport * from 'firebase/storage';\n\nclass Storage {\n    constructor(auth) {\n        return auth;\n    }\n}\nconst STORAGE_PROVIDER_NAME = 'storage';\nclass StorageInstances {\n    constructor() {\n        return ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME);\n    }\n}\nconst storageInstance$ = timer(0, 300).pipe(concatMap(() => from(ɵgetAllInstancesOf(STORAGE_PROVIDER_NAME))), distinct());\n\nconst PROVIDED_STORAGE_INSTANCES = new InjectionToken('angularfire2.storage-instances');\nfunction defaultStorageInstanceFactory(provided, defaultApp) {\n    const defaultStorage = ɵgetDefaultInstanceOf(STORAGE_PROVIDER_NAME, provided, defaultApp);\n    return defaultStorage && new Storage(defaultStorage);\n}\nfunction storageInstanceFactory(fn) {\n    return (zone, injector) => {\n        const storage = zone.runOutsideAngular(() => fn(injector));\n        return new Storage(storage);\n    };\n}\nconst STORAGE_INSTANCES_PROVIDER = {\n    provide: StorageInstances,\n    deps: [\n        [new Optional(), PROVIDED_STORAGE_INSTANCES],\n    ]\n};\nconst DEFAULT_STORAGE_INSTANCE_PROVIDER = {\n    provide: Storage,\n    useFactory: defaultStorageInstanceFactory,\n    deps: [\n        [new Optional(), PROVIDED_STORAGE_INSTANCES],\n        FirebaseApp,\n    ]\n};\nclass StorageModule {\n    constructor() {\n        registerVersion('angularfire', VERSION.full, 'gcs');\n    }\n}\nStorageModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: StorageModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nStorageModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: StorageModule });\nStorageModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: StorageModule, providers: [\n        DEFAULT_STORAGE_INSTANCE_PROVIDER,\n        STORAGE_INSTANCES_PROVIDER,\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.1.3\", ngImport: i0, type: StorageModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [\n                        DEFAULT_STORAGE_INSTANCE_PROVIDER,\n                        STORAGE_INSTANCES_PROVIDER,\n                    ]\n                }]\n        }], ctorParameters: function () { return []; } });\nfunction provideStorage(fn, ...deps) {\n    return {\n        ngModule: StorageModule,\n        providers: [{\n                provide: PROVIDED_STORAGE_INSTANCES,\n                useFactory: storageInstanceFactory(fn),\n                multi: true,\n                deps: [\n                    NgZone,\n                    Injector,\n                    ɵAngularFireSchedulers,\n                    FirebaseApps,\n                    // Defensively load Auth first, if provided\n                    [new Optional(), AuthInstances],\n                    [new Optional(), AppCheckInstances],\n                    ...deps,\n                ]\n            }]\n    };\n}\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst fromTask = ɵzoneWrap(fromTask$1, true);\nconst percentage = ɵzoneWrap(percentage$1, true);\n\n// DO NOT MODIFY, this file is autogenerated by tools/build.ts\nconst connectStorageEmulator = ɵzoneWrap(connectStorageEmulator$1, true);\nconst deleteObject = ɵzoneWrap(deleteObject$1, true);\nconst getDownloadURL = ɵzoneWrap(getDownloadURL$1, true);\nconst getMetadata = ɵzoneWrap(getMetadata$1, true);\nconst getStorage = ɵzoneWrap(getStorage$1, true);\nconst list = ɵzoneWrap(list$1, true);\nconst listAll = ɵzoneWrap(listAll$1, true);\nconst ref = ɵzoneWrap(ref$1, true);\nconst updateMetadata = ɵzoneWrap(updateMetadata$1, true);\nconst uploadBytes = ɵzoneWrap(uploadBytes$1, true);\nconst uploadBytesResumable = ɵzoneWrap(uploadBytesResumable$1, true);\nconst uploadString = ɵzoneWrap(uploadString$1, true);\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Storage, StorageInstances, StorageModule, connectStorageEmulator, deleteObject, fromTask, getDownloadURL, getMetadata, getStorage, list, listAll, percentage, provideStorage, ref, storageInstance$, updateMetadata, uploadBytes, uploadBytesResumable, uploadString };\n"]},"metadata":{},"sourceType":"module"}