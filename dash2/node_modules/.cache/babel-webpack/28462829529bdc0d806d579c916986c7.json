{"ast":null,"code":"import _asyncToGenerator from \"/home/dev/Development/src/untitled folder/dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators, VERSION } from '@angular/forms';\nimport { HttpResponse, HttpEventType } from '@angular/common/http';\nlet AdminServiceUpdateComponent = class AdminServiceUpdateComponent {\n  constructor(http, uploadService, categoriesService, artistService, productService, router, route, toastService) {\n    var _this = this;\n\n    this.http = http;\n    this.uploadService = uploadService;\n    this.categoriesService = categoriesService;\n    this.artistService = artistService;\n    this.productService = productService;\n    this.router = router;\n    this.route = route;\n    this.toastService = toastService;\n    this.uploadSuccess = false;\n    this.addSuccess = false;\n    this.alerts = [{\n      type: 'success',\n      message: 'Categeory add success'\n    }];\n    this.isLoading = false;\n    this.serviceForm = new FormGroup({\n      title: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      description: new FormControl('', [Validators.required, Validators.minLength(30)]),\n      size: new FormControl('', [Validators.required, Validators.minLength(3)]),\n      price: new FormControl('', [Validators.required, Validators.min(100)]),\n      artist: new FormControl(''),\n      category: new FormControl(''),\n      mainImg: new FormControl('')\n    });\n    this.version = VERSION;\n    this.router.params.subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (param) {\n        yield _this.productService.getOneProduct(param.id).subscribe( /*#__PURE__*/function () {\n          var _ref2 = _asyncToGenerator(function* (data) {\n            // console.log(data);\n            _this.currentProduct = yield data;\n            yield _this.categoriesService.getOneCategory(data.categoryID).subscribe( /*#__PURE__*/function () {\n              var _ref3 = _asyncToGenerator(function* (data) {\n                _this.currentCategeory = yield data;\n              });\n\n              return function (_x3) {\n                return _ref3.apply(this, arguments);\n              };\n            }());\n            yield _this.artistService.getOneArtist(data.artistID).subscribe( /*#__PURE__*/function () {\n              var _ref4 = _asyncToGenerator(function* (data) {\n                _this.currentArtist = yield data;\n              });\n\n              return function (_x4) {\n                return _ref4.apply(this, arguments);\n              };\n            }());\n\n            if (_this.currentProduct && _this.currentCategeory && _this.currentArtist) {\n              _this.isLoading = true;\n            } else {\n              _this.isLoading = false;\n            }\n          });\n\n          return function (_x2) {\n            return _ref2.apply(this, arguments);\n          };\n        }());\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    this.categeories = this.categoriesService.getcategoriess().subscribe( /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (data) {\n        _this.categeories = yield data;\n      });\n\n      return function (_x5) {\n        return _ref5.apply(this, arguments);\n      };\n    }());\n    this.artists = this.artistService.getArtists().subscribe( /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator(function* (data) {\n        _this.artists = yield data;\n      });\n\n      return function (_x6) {\n        return _ref6.apply(this, arguments);\n      };\n    }());\n  }\n\n  get title() {\n    return this.serviceForm.get('title');\n  }\n\n  get description() {\n    return this.serviceForm.get('description');\n  }\n\n  get size() {\n    return this.serviceForm.get('size');\n  }\n\n  get price() {\n    return this.serviceForm.get('price');\n  }\n\n  get artist() {\n    return this.serviceForm.get('artist');\n  }\n\n  get category() {\n    return this.serviceForm.get('category');\n  }\n\n  get mainImg() {\n    return this.serviceForm.get('mainImg');\n  }\n\n  updateService() {\n    if (!this.selectedFiles && this.serviceForm.valid) {\n      this.productService.updateProduct(this.currentProduct.id, {\n        title: this.title.value,\n        description: this.description.value,\n        size: this.size.value ? this.size.value : '',\n        price: this.price.value,\n        artistID: this.artist.value,\n        categoryID: this.category.value,\n        TimeStamp: {\n          updatedAt: new Date().toDateString()\n        }\n      }).then(() => {\n        this.addSuccess = true;\n        setTimeout(() => {\n          this.route.navigate(['/admin/services']);\n        }, 1000);\n      });\n    } else if (this.selectedFiles) {\n      this.uploadService.upload('images/services', this.selectedFiles[0].name, this.selectedFiles[0]).then(data => {\n        if (data && this.uploadSuccess && this.serviceForm.valid) {\n          this.productService.updateProduct(this.currentProduct.id, {\n            title: this.title.value,\n            description: this.description.value,\n            size: this.size.value ? this.size.value : '',\n            price: this.price.value,\n            images: {\n              mainImage: data,\n              subImages: [data, data, data]\n            },\n            artistID: this.artist.value,\n            categoryID: this.category.value,\n            TimeStamp: {\n              createdAt: new Date().toDateString(),\n              updatedAt: new Date().toDateString(),\n              removedAt: null\n            }\n          }).then(() => {\n            this.addSuccess = true;\n            setTimeout(() => {\n              this.route.navigate(['/admin/services']);\n            }, 1000);\n          });\n        }\n      });\n    }\n  }\n\n  upload(files) {\n    this.uploadAndProgress(files);\n    this.selectedFiles = files;\n  }\n\n  uploadAndProgress(files) {\n    var formData = new FormData();\n    Array.from(files).forEach(f => formData.append('file', f));\n    this.http.post('https://file.io', formData, {\n      reportProgress: true,\n      observe: 'events'\n    }).subscribe(event => {\n      if (event.type === HttpEventType.UploadProgress) {\n        this.percentDone = Math.round(100 * event.loaded / event.total);\n        console.log(files);\n      } else if (event instanceof HttpResponse) {\n        this.uploadSuccess = true;\n      }\n    });\n  }\n\n  ngOnInit() {}\n\n  ngOnChanges() {}\n\n  showSuccess() {\n    this.toastService.show('Update success ', {\n      classname: 'bg-success text-light',\n      delay: 10000\n    });\n  }\n\n};\nAdminServiceUpdateComponent = __decorate([Component({\n  selector: 'app-admin-service-update',\n  templateUrl: './admin-service-update.component.html',\n  styleUrls: ['./admin-service-update.component.css']\n})], AdminServiceUpdateComponent);\nexport { AdminServiceUpdateComponent };","map":{"version":3,"sources":["/home/dev/Development/src/untitled folder/dashboard/src/app/components/admin-service/admin-service-update/admin-service-update.component.ts"],"names":["__decorate","Component","FormControl","FormGroup","Validators","VERSION","HttpResponse","HttpEventType","AdminServiceUpdateComponent","constructor","http","uploadService","categoriesService","artistService","productService","router","route","toastService","uploadSuccess","addSuccess","alerts","type","message","isLoading","serviceForm","title","required","minLength","description","size","price","min","artist","category","mainImg","version","params","subscribe","param","getOneProduct","id","data","currentProduct","getOneCategory","categoryID","currentCategeory","getOneArtist","artistID","currentArtist","categeories","getcategoriess","artists","getArtists","get","updateService","selectedFiles","valid","updateProduct","value","TimeStamp","updatedAt","Date","toDateString","then","setTimeout","navigate","upload","name","images","mainImage","subImages","createdAt","removedAt","files","uploadAndProgress","formData","FormData","Array","from","forEach","f","append","post","reportProgress","observe","event","UploadProgress","percentDone","Math","round","loaded","total","console","log","ngOnInit","ngOnChanges","showSuccess","show","classname","delay","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators, VERSION } from '@angular/forms';\nimport { HttpResponse, HttpEventType, } from '@angular/common/http';\nlet AdminServiceUpdateComponent = class AdminServiceUpdateComponent {\n    constructor(http, uploadService, categoriesService, artistService, productService, router, route, toastService) {\n        this.http = http;\n        this.uploadService = uploadService;\n        this.categoriesService = categoriesService;\n        this.artistService = artistService;\n        this.productService = productService;\n        this.router = router;\n        this.route = route;\n        this.toastService = toastService;\n        this.uploadSuccess = false;\n        this.addSuccess = false;\n        this.alerts = [\n            {\n                type: 'success',\n                message: 'Categeory add success',\n            },\n        ];\n        this.isLoading = false;\n        this.serviceForm = new FormGroup({\n            title: new FormControl('', [Validators.required, Validators.minLength(3)]),\n            description: new FormControl('', [\n                Validators.required,\n                Validators.minLength(30),\n            ]),\n            size: new FormControl('', [Validators.required, Validators.minLength(3)]),\n            price: new FormControl('', [Validators.required, Validators.min(100)]),\n            artist: new FormControl(''),\n            category: new FormControl(''),\n            mainImg: new FormControl(''),\n        });\n        this.version = VERSION;\n        this.router.params.subscribe(async (param) => {\n            await this.productService\n                .getOneProduct(param.id)\n                .subscribe(async (data) => {\n                // console.log(data);\n                this.currentProduct = await data;\n                await this.categoriesService\n                    .getOneCategory(data.categoryID)\n                    .subscribe(async (data) => {\n                    this.currentCategeory = await data;\n                });\n                await this.artistService\n                    .getOneArtist(data.artistID)\n                    .subscribe(async (data) => {\n                    this.currentArtist = await data;\n                });\n                if (this.currentProduct &&\n                    this.currentCategeory &&\n                    this.currentArtist) {\n                    this.isLoading = true;\n                }\n                else {\n                    this.isLoading = false;\n                }\n            });\n        });\n        this.categeories = this.categoriesService\n            .getcategoriess()\n            .subscribe(async (data) => {\n            this.categeories = await data;\n        });\n        this.artists = this.artistService.getArtists().subscribe(async (data) => {\n            this.artists = await data;\n        });\n    }\n    get title() {\n        return this.serviceForm.get('title');\n    }\n    get description() {\n        return this.serviceForm.get('description');\n    }\n    get size() {\n        return this.serviceForm.get('size');\n    }\n    get price() {\n        return this.serviceForm.get('price');\n    }\n    get artist() {\n        return this.serviceForm.get('artist');\n    }\n    get category() {\n        return this.serviceForm.get('category');\n    }\n    get mainImg() {\n        return this.serviceForm.get('mainImg');\n    }\n    updateService() {\n        if (!this.selectedFiles && this.serviceForm.valid) {\n            this.productService\n                .updateProduct(this.currentProduct.id, {\n                title: this.title.value,\n                description: this.description.value,\n                size: this.size.value ? this.size.value : '',\n                price: this.price.value,\n                artistID: this.artist.value,\n                categoryID: this.category.value,\n                TimeStamp: {\n                    updatedAt: new Date().toDateString(),\n                },\n            })\n                .then(() => {\n                this.addSuccess = true;\n                setTimeout(() => {\n                    this.route.navigate(['/admin/services']);\n                }, 1000);\n            });\n        }\n        else if (this.selectedFiles) {\n            this.uploadService\n                .upload('images/services', this.selectedFiles[0].name, this.selectedFiles[0])\n                .then((data) => {\n                if (data && this.uploadSuccess && this.serviceForm.valid) {\n                    this.productService\n                        .updateProduct(this.currentProduct.id, {\n                        title: this.title.value,\n                        description: this.description.value,\n                        size: this.size.value ? this.size.value : '',\n                        price: this.price.value,\n                        images: {\n                            mainImage: data,\n                            subImages: [data, data, data],\n                        },\n                        artistID: this.artist.value,\n                        categoryID: this.category.value,\n                        TimeStamp: {\n                            createdAt: new Date().toDateString(),\n                            updatedAt: new Date().toDateString(),\n                            removedAt: null,\n                        },\n                    })\n                        .then(() => {\n                        this.addSuccess = true;\n                        setTimeout(() => {\n                            this.route.navigate(['/admin/services']);\n                        }, 1000);\n                    });\n                }\n            });\n        }\n    }\n    upload(files) {\n        this.uploadAndProgress(files);\n        this.selectedFiles = files;\n    }\n    uploadAndProgress(files) {\n        var formData = new FormData();\n        Array.from(files).forEach((f) => formData.append('file', f));\n        this.http\n            .post('https://file.io', formData, {\n            reportProgress: true,\n            observe: 'events',\n        })\n            .subscribe((event) => {\n            if (event.type === HttpEventType.UploadProgress) {\n                this.percentDone = Math.round((100 * event.loaded) / event.total);\n                console.log(files);\n            }\n            else if (event instanceof HttpResponse) {\n                this.uploadSuccess = true;\n            }\n        });\n    }\n    ngOnInit() { }\n    ngOnChanges() { }\n    showSuccess() {\n        this.toastService.show('Update success ', {\n            classname: 'bg-success text-light',\n            delay: 10000,\n        });\n    }\n};\nAdminServiceUpdateComponent = __decorate([\n    Component({\n        selector: 'app-admin-service-update',\n        templateUrl: './admin-service-update.component.html',\n        styleUrls: ['./admin-service-update.component.css'],\n    })\n], AdminServiceUpdateComponent);\nexport { AdminServiceUpdateComponent };\n"]},"metadata":{},"sourceType":"module"}