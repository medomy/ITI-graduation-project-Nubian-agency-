{"ast":null,"code":"import _asyncToGenerator from \"/home/dev/Desktop/final relase/Nubian-Agancy/Client-Side/dash2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { collection, collectionData, doc, docData, setDoc, deleteDoc, query, where } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/fire/firestore\";\nexport class UserService {\n  constructor(router, http, db) {\n    var _this = this;\n\n    this.router = router;\n    this.http = http;\n    this.db = db; //create user\n\n    this.createUser = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* ({\n        data\n      }) {\n        const userData = {\n          uid: data.uid,\n          email: data.email,\n          displayName: data.displayName,\n          phoneNumber: data.phoneNumber,\n          emailVerified: data.emailVerified,\n          avatar: data.photoURL,\n          birthDate: '',\n          gender: '',\n          isAdmin: false,\n          TimeStamp: {\n            createdAt: data.metadata.creationTime,\n            lastSignInTime: data.metadata.lastSignInTime,\n            updatedAt: '',\n            removedAt: ''\n          }\n        };\n        const newUser = yield doc(collection(_this.db, 'users'));\n        setDoc(newUser, Object.assign(Object.assign({}, userData), {\n          id: newUser.id\n        }));\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  } //get by id\n\n\n  getOneUser(id) {\n    const data = query(collection(this.db, 'users'), where('uid', '==', id));\n    return collectionData(data);\n  } // getting all users\n\n\n  getUsers() {\n    const dataCollection = collection(this.db, 'users');\n    return collectionData(dataCollection);\n  } // get all user not admin\n\n\n  getUserNotAdmin() {\n    const data = query(collection(this.db, 'users'), where('isAdmin', '!=', true));\n    return collectionData(data);\n  } // update users for profile\n\n\n  updateUser(id, newprop) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      yield setDoc(doc(_this2.db, 'users', id), newprop, {\n        merge: true\n      });\n    })();\n  } //get user by id from firestore\n\n\n  getUsersByuid(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      let oneProduct = doc(_this3.db, `users`, id);\n      return docData(oneProduct);\n    })();\n  }\n\n  removeuser(id) {\n    deleteDoc(doc(this.db, 'users', id));\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Firestore));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/dev/Desktop/final relase/Nubian-Agancy/Client-Side/dash2/src/app/core/services/user/user.service.ts"],"names":["collection","collectionData","doc","docData","setDoc","deleteDoc","query","where","i0","i1","i2","i3","UserService","constructor","router","http","db","createUser","data","userData","uid","email","displayName","phoneNumber","emailVerified","avatar","photoURL","birthDate","gender","isAdmin","TimeStamp","createdAt","metadata","creationTime","lastSignInTime","updatedAt","removedAt","newUser","Object","assign","id","getOneUser","getUsers","dataCollection","getUserNotAdmin","updateUser","newprop","merge","getUsersByuid","oneProduct","removeuser","ɵfac","UserService_Factory","t","ɵɵinject","Router","HttpClient","Firestore","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { collection, collectionData, doc, docData, setDoc, deleteDoc, query, where, } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/fire/firestore\";\nexport class UserService {\n    constructor(router, http, db) {\n        this.router = router;\n        this.http = http;\n        this.db = db;\n        //create user\n        this.createUser = async ({ data }) => {\n            const userData = {\n                uid: data.uid,\n                email: data.email,\n                displayName: data.displayName,\n                phoneNumber: data.phoneNumber,\n                emailVerified: data.emailVerified,\n                avatar: data.photoURL,\n                birthDate: '',\n                gender: '',\n                isAdmin: false,\n                TimeStamp: {\n                    createdAt: data.metadata.creationTime,\n                    lastSignInTime: data.metadata.lastSignInTime,\n                    updatedAt: '',\n                    removedAt: '',\n                },\n            };\n            const newUser = await doc(collection(this.db, 'users'));\n            setDoc(newUser, Object.assign(Object.assign({}, userData), { id: newUser.id }));\n        };\n    }\n    //get by id\n    getOneUser(id) {\n        const data = query(collection(this.db, 'users'), where('uid', '==', id));\n        return collectionData(data);\n    }\n    // getting all users\n    getUsers() {\n        const dataCollection = collection(this.db, 'users');\n        return collectionData(dataCollection);\n    }\n    // get all user not admin\n    getUserNotAdmin() {\n        const data = query(collection(this.db, 'users'), where('isAdmin', '!=', true));\n        return collectionData(data);\n    }\n    // update users for profile\n    async updateUser(id, newprop) {\n        await setDoc(doc(this.db, 'users', id), newprop, { merge: true });\n    }\n    //get user by id from firestore\n    async getUsersByuid(id) {\n        let oneProduct = doc(this.db, `users`, id);\n        return docData(oneProduct);\n    }\n    removeuser(id) {\n        deleteDoc(doc(this.db, 'users', id));\n    }\n}\nUserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.HttpClient), i0.ɵɵinject(i3.Firestore)); };\nUserService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}